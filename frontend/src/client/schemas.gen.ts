// This file is auto-generated by @hey-api/openapi-ts

export const AppointmentCreateSchema = {
    properties: {
        complaints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complaints'
        },
        anamnesis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anamnesis'
        },
        objective_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objective Status'
        },
        doctor_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Diagnosis'
        },
        doctor_recommendations: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Recommendations'
        },
        nlp_recommendations: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlp Recommendations'
        },
        nlp_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlp Diagnosis'
        },
        patient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Patient Id'
        },
        disease_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disease Id'
        }
    },
    type: 'object',
    required: ['patient_id', 'disease_id'],
    title: 'AppointmentCreate'
} as const;

export const AppointmentInferenceSchema = {
    properties: {
        complaints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complaints'
        },
        anamnesis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anamnesis'
        },
        objective_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objective Status'
        },
        patient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Patient Id'
        },
        disease_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disease Id'
        }
    },
    type: 'object',
    title: 'AppointmentInference'
} as const;

export const AppointmentPublicSchema = {
    properties: {
        complaints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complaints'
        },
        anamnesis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anamnesis'
        },
        objective_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objective Status'
        },
        doctor_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Diagnosis'
        },
        doctor_recommendations: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Recommendations'
        },
        nlp_recommendations: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlp Recommendations'
        },
        nlp_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlp Diagnosis'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        patient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Patient Id'
        },
        disease_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disease Id'
        },
        doctor_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['id', 'created_at'],
    title: 'AppointmentPublic'
} as const;

export const AppointmentUpdateSchema = {
    properties: {
        complaints: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Complaints'
        },
        anamnesis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Anamnesis'
        },
        objective_status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Objective Status'
        },
        doctor_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Diagnosis'
        },
        doctor_recommendations: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Doctor Recommendations'
        },
        nlp_recommendations: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlp Recommendations'
        },
        nlp_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nlp Diagnosis'
        },
        disease_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Disease Id'
        }
    },
    type: 'object',
    title: 'AppointmentUpdate'
} as const;

export const AppointmentsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AppointmentPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'AppointmentsPublic'
} as const;

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const DiseaseCreateSchema = {
    properties: {
        last_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Diagnosis'
        },
        patient_id: {
            type: 'string',
            format: 'uuid',
            title: 'Patient Id'
        }
    },
    type: 'object',
    required: ['patient_id'],
    title: 'DiseaseCreate'
} as const;

export const DiseasePublicSchema = {
    properties: {
        last_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Diagnosis'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        patient_id: {
            type: 'string',
            format: 'uuid',
            title: 'Patient Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'patient_id', 'created_at', 'updated_at'],
    title: 'DiseasePublic'
} as const;

export const DiseaseUpdateSchema = {
    properties: {
        patient_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Patient Id'
        },
        last_diagnosis: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Diagnosis'
        }
    },
    type: 'object',
    title: 'DiseaseUpdate'
} as const;

export const DiseasesPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/DiseasePublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'DiseasesPublic'
} as const;

export const GenderSchema = {
    type: 'string',
    enum: ['male', 'female'],
    title: 'Gender'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InferenceResultSchema = {
    properties: {
        result: {
            type: 'string',
            title: 'Result'
        }
    },
    type: 'object',
    required: ['result'],
    title: 'InferenceResult'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PatientCreateSchema = {
    properties: {
        full_name: {
            type: 'string',
            maxLength: 255,
            title: 'Full Name'
        },
        birth_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birth Date'
        },
        gender: {
            '$ref': '#/components/schemas/Gender'
        }
    },
    type: 'object',
    required: ['full_name', 'gender'],
    title: 'PatientCreate'
} as const;

export const PatientPublicSchema = {
    properties: {
        full_name: {
            type: 'string',
            maxLength: 255,
            title: 'Full Name'
        },
        birth_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birth Date'
        },
        gender: {
            '$ref': '#/components/schemas/Gender'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['full_name', 'gender', 'id'],
    title: 'PatientPublic'
} as const;

export const PatientUpdateSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        birth_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birth Date'
        },
        gender: {
            '$ref': '#/components/schemas/Gender'
        }
    },
    type: 'object',
    required: ['gender'],
    title: 'PatientUpdate'
} as const;

export const PatientsPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/PatientPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'PatientsPublic'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;