// This file is auto-generated by @hey-api/openapi-ts

export type AppointmentCreate = {
    complaints?: (string | null);
    anamnesis?: (string | null);
    objective_status?: (string | null);
    doctor_diagnosis?: (string | null);
    doctor_recommendations?: (string | null);
    nlp_recommendations?: (string | null);
    nlp_diagnosis?: (string | null);
    patient_id: (string | null);
    disease_id: (string | null);
};

export type AppointmentInference = {
    complaints?: (string | null);
    anamnesis?: (string | null);
    objective_status?: (string | null);
    patient_id?: (string | null);
    disease_id?: (string | null);
};

export type AppointmentPublic = {
    complaints?: (string | null);
    anamnesis?: (string | null);
    objective_status?: (string | null);
    doctor_diagnosis?: (string | null);
    doctor_recommendations?: (string | null);
    nlp_recommendations?: (string | null);
    nlp_diagnosis?: (string | null);
    id: string;
    patient_id?: (string | null);
    disease_id?: (string | null);
    doctor_id?: (string | null);
    created_at: Date;
};

export type AppointmentsPublic = {
    data: Array<AppointmentPublic>;
    count: number;
};

export type AppointmentUpdate = {
    complaints?: (string | null);
    anamnesis?: (string | null);
    objective_status?: (string | null);
    doctor_diagnosis?: (string | null);
    doctor_recommendations?: (string | null);
    nlp_recommendations?: (string | null);
    nlp_diagnosis?: (string | null);
    disease_id?: (string | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type DiseaseCreate = {
    last_diagnosis?: (string | null);
    patient_id: string;
};

export type DiseasePublic = {
    last_diagnosis?: (string | null);
    id: string;
    patient_id: string;
    created_at: Date;
    updated_at: Date;
};

export type DiseasesPublic = {
    data: Array<DiseasePublic>;
    count: number;
};

export type DiseaseUpdate = {
    patient_id?: (string | null);
    last_diagnosis?: (string | null);
};

export type Gender = 'male' | 'female';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type InferenceResult = {
    result: string;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PatientCreate = {
    full_name: string;
    birth_date?: (Date | null);
    gender: Gender;
};

export type PatientPublic = {
    full_name: string;
    birth_date?: (Date | null);
    gender: Gender;
    id: string;
};

export type PatientsPublic = {
    data: Array<PatientPublic>;
    count: number;
};

export type PatientUpdate = {
    full_name?: (string | null);
    birth_date?: (Date | null);
    gender: Gender;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type LoginLoginAccessTokenData = {
    body: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginLoginAccessTokenError = (HTTPValidationError);

export type LoginTestTokenResponse = (UserPublic);

export type LoginTestTokenError = unknown;

export type LoginRecoverPasswordData = {
    path: {
        email: string;
    };
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginRecoverPasswordError = (HTTPValidationError);

export type LoginResetPasswordData = {
    body: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginResetPasswordError = (HTTPValidationError);

export type LoginRecoverPasswordHtmlContentData = {
    path: {
        email: string;
    };
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type LoginRecoverPasswordHtmlContentError = (HTTPValidationError);

export type UsersReadUsersData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersReadUsersError = (HTTPValidationError);

export type UsersCreateUserData = {
    body: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersCreateUserError = (HTTPValidationError);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersReadUserMeError = unknown;

export type UsersDeleteUserMeResponse = (Message);

export type UsersDeleteUserMeError = unknown;

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdateUserMeError = (HTTPValidationError);

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersUpdatePasswordMeError = (HTTPValidationError);

export type UsersRegisterUserData = {
    body: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersRegisterUserError = (HTTPValidationError);

export type UsersReadUserByIdData = {
    path: {
        user_id: string;
    };
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersReadUserByIdError = (HTTPValidationError);

export type UsersUpdateUserData = {
    body: UserUpdate;
    path: {
        user_id: string;
    };
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersUpdateUserError = (HTTPValidationError);

export type UsersDeleteUserData = {
    path: {
        user_id: string;
    };
};

export type UsersDeleteUserResponse = (Message);

export type UsersDeleteUserError = (HTTPValidationError);

export type UtilsTestEmailData = {
    query: {
        email_to: string;
    };
};

export type UtilsTestEmailResponse = (Message);

export type UtilsTestEmailError = (HTTPValidationError);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsHealthCheckError = unknown;

export type PatientsReadPatientsData = {
    query?: {
        limit?: number;
        skip?: number;
    };
};

export type PatientsReadPatientsResponse = (PatientsPublic);

export type PatientsReadPatientsError = (HTTPValidationError);

export type PatientsCreatePatientData = {
    body: PatientCreate;
};

export type PatientsCreatePatientResponse = (PatientPublic);

export type PatientsCreatePatientError = (HTTPValidationError);

export type PatientsReadPatientData = {
    path: {
        id: string;
    };
};

export type PatientsReadPatientResponse = (PatientPublic);

export type PatientsReadPatientError = (HTTPValidationError);

export type PatientsUpdatePatientData = {
    body: PatientUpdate;
    path: {
        id: string;
    };
};

export type PatientsUpdatePatientResponse = (PatientPublic);

export type PatientsUpdatePatientError = (HTTPValidationError);

export type PatientsDeletePatientData = {
    path: {
        id: string;
    };
};

export type PatientsDeletePatientResponse = (Message);

export type PatientsDeletePatientError = (HTTPValidationError);

export type DiseasesReadDiseasesData = {
    query?: {
        limit?: number;
        /**
         * Filter diseases by patient ID
         */
        patient_id?: (string | null);
        skip?: number;
        /**
         * Sort order by date
         */
        sort_order?: 'asc' | 'desc';
    };
};

export type DiseasesReadDiseasesResponse = (DiseasesPublic);

export type DiseasesReadDiseasesError = (HTTPValidationError);

export type DiseasesCreateDiseaseData = {
    body: DiseaseCreate;
};

export type DiseasesCreateDiseaseResponse = (DiseasePublic);

export type DiseasesCreateDiseaseError = (HTTPValidationError);

export type DiseasesReadDiseaseData = {
    path: {
        id: string;
    };
};

export type DiseasesReadDiseaseResponse = (DiseasePublic);

export type DiseasesReadDiseaseError = (HTTPValidationError);

export type DiseasesUpdateDiseaseData = {
    body: DiseaseUpdate;
    path: {
        id: string;
    };
};

export type DiseasesUpdateDiseaseResponse = (DiseasePublic);

export type DiseasesUpdateDiseaseError = (HTTPValidationError);

export type DiseasesDeleteDiseaseData = {
    path: {
        id: string;
    };
};

export type DiseasesDeleteDiseaseResponse = (Message);

export type DiseasesDeleteDiseaseError = (HTTPValidationError);

export type AppointmentsReadAppointmentData = {
    path: {
        id: string;
    };
};

export type AppointmentsReadAppointmentResponse = (AppointmentPublic);

export type AppointmentsReadAppointmentError = (HTTPValidationError);

export type AppointmentsUpdateAppointmentData = {
    body: AppointmentUpdate;
    path: {
        id: string;
    };
};

export type AppointmentsUpdateAppointmentResponse = (AppointmentPublic);

export type AppointmentsUpdateAppointmentError = (HTTPValidationError);

export type AppointmentsDeleteAppointmentData = {
    path: {
        id: string;
    };
};

export type AppointmentsDeleteAppointmentResponse = (Message);

export type AppointmentsDeleteAppointmentError = (HTTPValidationError);

export type AppointmentsCreateAppointmentData = {
    body: AppointmentCreate;
};

export type AppointmentsCreateAppointmentResponse = (AppointmentPublic);

export type AppointmentsCreateAppointmentError = (HTTPValidationError);

export type AppointmentsReadAppointmentsData = {
    query?: {
        /**
         * Filter appointments by disease ID
         */
        disease_id?: (string | null);
        /**
         * Filter appointments by doctor ID
         */
        doctor_id?: (string | null);
        limit?: number;
        /**
         * Filter appointments by patient ID
         */
        patient_id?: (string | null);
        skip?: number;
        /**
         * Sort order by appointment date
         */
        sort_order?: 'asc' | 'desc';
    };
};

export type AppointmentsReadAppointmentsResponse = (AppointmentsPublic);

export type AppointmentsReadAppointmentsError = (HTTPValidationError);

export type ModelsModelInferenceData = {
    body: AppointmentInference;
    path: {
        model: string;
    };
};

export type ModelsModelInferenceResponse = (InferenceResult);

export type ModelsModelInferenceError = (HTTPValidationError);

export type ModelsReadRecsData = {
    query: {
        /**
         * Filter recommendation by label
         */
        label: string;
    };
};

export type ModelsReadRecsResponse = (InferenceResult);

export type ModelsReadRecsError = (HTTPValidationError);

export type DiseasesReadDiseasesResponseTransformer = (data: any) => Promise<DiseasesReadDiseasesResponse>;

export type DiseasesPublicModelResponseTransformer = (data: any) => DiseasesPublic;

export type DiseasePublicModelResponseTransformer = (data: any) => DiseasePublic;

export const DiseasePublicModelResponseTransformer: DiseasePublicModelResponseTransformer = data => {
    if (data?.created_at) {
        data.created_at = new Date(data.created_at);
    }
    if (data?.updated_at) {
        data.updated_at = new Date(data.updated_at);
    }
    return data;
};

export const DiseasesPublicModelResponseTransformer: DiseasesPublicModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(DiseasePublicModelResponseTransformer);
    }
    return data;
};

export const DiseasesReadDiseasesResponseTransformer: DiseasesReadDiseasesResponseTransformer = async (data) => {
    DiseasesPublicModelResponseTransformer(data);
    return data;
};

export type DiseasesCreateDiseaseResponseTransformer = (data: any) => Promise<DiseasesCreateDiseaseResponse>;

export const DiseasesCreateDiseaseResponseTransformer: DiseasesCreateDiseaseResponseTransformer = async (data) => {
    DiseasePublicModelResponseTransformer(data);
    return data;
};

export type DiseasesReadDiseaseResponseTransformer = (data: any) => Promise<DiseasesReadDiseaseResponse>;

export const DiseasesReadDiseaseResponseTransformer: DiseasesReadDiseaseResponseTransformer = async (data) => {
    DiseasePublicModelResponseTransformer(data);
    return data;
};

export type DiseasesUpdateDiseaseResponseTransformer = (data: any) => Promise<DiseasesUpdateDiseaseResponse>;

export const DiseasesUpdateDiseaseResponseTransformer: DiseasesUpdateDiseaseResponseTransformer = async (data) => {
    DiseasePublicModelResponseTransformer(data);
    return data;
};

export type AppointmentsReadAppointmentResponseTransformer = (data: any) => Promise<AppointmentsReadAppointmentResponse>;

export type AppointmentPublicModelResponseTransformer = (data: any) => AppointmentPublic;

export const AppointmentPublicModelResponseTransformer: AppointmentPublicModelResponseTransformer = data => {
    if (data?.created_at) {
        data.created_at = new Date(data.created_at);
    }
    return data;
};

export const AppointmentsReadAppointmentResponseTransformer: AppointmentsReadAppointmentResponseTransformer = async (data) => {
    AppointmentPublicModelResponseTransformer(data);
    return data;
};

export type AppointmentsUpdateAppointmentResponseTransformer = (data: any) => Promise<AppointmentsUpdateAppointmentResponse>;

export const AppointmentsUpdateAppointmentResponseTransformer: AppointmentsUpdateAppointmentResponseTransformer = async (data) => {
    AppointmentPublicModelResponseTransformer(data);
    return data;
};

export type AppointmentsCreateAppointmentResponseTransformer = (data: any) => Promise<AppointmentsCreateAppointmentResponse>;

export const AppointmentsCreateAppointmentResponseTransformer: AppointmentsCreateAppointmentResponseTransformer = async (data) => {
    AppointmentPublicModelResponseTransformer(data);
    return data;
};

export type AppointmentsReadAppointmentsResponseTransformer = (data: any) => Promise<AppointmentsReadAppointmentsResponse>;

export type AppointmentsPublicModelResponseTransformer = (data: any) => AppointmentsPublic;

export const AppointmentsPublicModelResponseTransformer: AppointmentsPublicModelResponseTransformer = data => {
    if (Array.isArray(data?.data)) {
        data.data.forEach(AppointmentPublicModelResponseTransformer);
    }
    return data;
};

export const AppointmentsReadAppointmentsResponseTransformer: AppointmentsReadAppointmentsResponseTransformer = async (data) => {
    AppointmentsPublicModelResponseTransformer(data);
    return data;
};